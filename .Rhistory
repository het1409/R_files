mydf$engine_size[is.na(mydf$engine_size)] = median_engine_size
#Checking if there are anyduplicates
duplicate_val = sum(duplicated(mydf))
duplicate_val
#Drop NA values for categorical values (damaged, first_owner)
mydf = mydf %>%
filter(!is.na(mydf$damaged))
mydf = mydf %>%
filter(!is.na(mydf$first_owner))
#Drop "Unknown" values in drivetrain
mydf = mydf %>%
filter(drivetrain != "Unknown")
#Check for spelling errors
mydf[mydf$fuel == "Pertol", "fuel"] = "Petrol"
unique(mydf$fuel)
table(mydf$fuel)
summary(mydf)
# summary(mydf)
#Graph:1 Average Price By Brand
ggplot(data = mydf, aes(x = reorder(brand, price), y = price, fill = brand)) + geom_bar(stat = "summary", fun  = "mean") +
labs(title = "Average Price by brand", x = "Brands", y = "Price") + theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Graph:2 Average Price By Fuel
ggplot(data = mydf, aes(x = reorder(fuel,price), y = price, fill = fuel)) + geom_bar(stat = "summary", fun = "mean") + labs(title = "Average price by fuel", x = "Fuel", y = "Price")
#Graph:3 Average Price By Drivetrain
ggplot(data = mydf, aes(x = reorder(drivetrain, price), y = price, fill = drivetrain)) + geom_bar(stat = "summary", fun = "mean") + labs(title = "Average price by drivetrain") + labs(title = "Average price by Drivetrain") + labs(title = "Average price by Drivetrain", x = "Drivetrain", y = "Price")
#Graph:4 Average Price by Damaged
#Coverting variable damaged into factor
mydf$damaged = factor(mydf$damaged, levels = c(0,1), labels = c("Not Damaged", "Damaged"))
ggplot(data = mydf, aes(x = damaged, y = price, fill = damaged)) + geom_boxplot() + labs(title = "Average price by Damaged", x = "Damaged", y = "Price")
#Graph:5 Average Price by Owner
#converting variable first_owner into factor
mydf$first_owner = factor(mydf$first_owner, levels = c(0,1), labels = c("Not first Owner", "First owner"))
ggplot(data = mydf, aes(x = first_owner, y = price, fill = first_owner)) + geom_boxplot() + labs(title = "Average Price by Owner", x = "Car Owner", y = "Price")
# Graph:6 Year Vs Price
ggplot(data = mydf, aes(x = year, y = price)) + geom_point() + geom_smooth() + labs(title = "Year Vs Price", x = "Year", y = "Price")
# Graph:7 Owner Vs Year
ggplot(data = mydf, aes(x = first_owner, y = year, fill = first_owner)) + geom_boxplot() + labs(title = "Owner Vs Year", x = "Car Owner", y = "Year")
# To analyze relationship between "price" and "first_owner"
# model_1 = lm(mydf$price~mydf$first_owner, data = mydf)
# summary(model_1)
# plot(model_1)
# To analyze relationship between "price" and "mileage"
# model_2 = lm(mydf$price~mydf$mileage, data = mydf)
# summary(model_2)
# plot(model_2)
#Making model with multiple regression
model_3 = lm(mydf$price ~ mydf$engine_size + mydf$min_mpg + mydf$max_mpg)
summary(model_3)
plot(model_3)
# model_4 = lm(mydf$price ~ mydf$drivetrain + mydf$engine_size)
# summary(model_4)
# plot(model_4)
model_5 = lm(price ~ . , data=mydf)
summary(model_5)
plot(model_5)
final_model = lm(log(price) ~ ., data = mydf)
summary(final_model)
plot(final_model)
m1 = glm(first_owner ~ price, data = mydf, family = binomial)
summary(m1)
m2 = glm(first_owner ~ damaged + price, data = mydf, family = binomial)
summary(m2)
m3 = glm(first_owner ~ mileage + price, data = mydf, family = binomial)
summary(m3)
m4 = glm(first_owner ~ mileage + price + damaged + year, data = mydf, family = binomial)
summary(m4)
# m = step(m4)
# summary(m)
m5 = glm(first_owner ~ ., data=mydf, family=binomial)
summary(m5)
# model_s = step(m5)
# summary(model_s)
#
# # use exp function (lec 8 slide)
# exp(coef(model_s))
# Add code here to load all the required libraries with `library()`.
# Do not include any `install.package()` for any required packages in this rmd file.
library(dplyr)
library(ggplot2)
library(Hmisc)
# library(tidyverse)
# Only change the value for SID
# Assign your student id into the variable SID, for example:
SID <- 2329524                  # This is an example, replace 2101234 with your actual ID
SIDoffset <- (SID %% 50) + 1    # Your SID mod 50 + 1
load("car-analysis-data.Rda")
# Now subset the car data set
# Pick every 50th observation starting from your offset
# Put into your data frame named mydf (you can rename it)
mydf <- cars.analysis[seq(from=SIDoffset,to=nrow(cars.analysis),by=50),]
#summarize the data
summary(mydf)
str(mydf)
#To calculate number of NA's in the table
colSums(is.na(mydf))
sum(is.na(mydf))
#Further exploration of data for each column
unique(mydf$fuel)
unique(mydf$drivetrain)
unique(mydf$brand)
#random imputation
# mydf$max_mpg = with(mydf, impute(max_mpg, "random"))
#Replacing `negative values` and `NA's` by doing median imputation of max_mpg
median_max_mpg = median(mydf$max_mpg[mydf$max_mpg > 0], na.rm = TRUE)
mydf$max_mpg[mydf$max_mpg < 0] = median_max_mpg
mydf$max_mpg[is.na(mydf$max_mpg)] = median_max_mpg
#Replacing NA's with median values of min_mpg
median_min_mpg = median(mydf$min_mpg[mydf$min_mpg > 0], na.rm = TRUE)
mydf$min_mpg[is.na(mydf$min_mpg)] = median_min_mpg
#Dropping NA values for categorical values (enginesize)
median_engine_size = median(mydf$engine_size[mydf$engine_size > 0], na.rm = TRUE)
mydf$engine_size[is.na(mydf$engine_size)] = median_engine_size
#Checking if there are anyduplicates
duplicate_val = sum(duplicated(mydf))
duplicate_val
#Drop NA values for categorical values (damaged, first_owner)
mydf = mydf %>%
filter(!is.na(mydf$damaged))
mydf = mydf %>%
filter(!is.na(mydf$first_owner))
#Drop "Unknown" values in drivetrain
mydf = mydf %>%
filter(drivetrain != "Unknown")
#Check for spelling errors
mydf[mydf$fuel == "Pertol", "fuel"] = "Petrol"
unique(mydf$fuel)
table(mydf$fuel)
summary(mydf)
# summary(mydf)
#Graph:1 Average Price By Brand
ggplot(data = mydf, aes(x = reorder(brand, price), y = price, fill = brand)) + geom_bar(stat = "summary", fun  = "mean") +
labs(title = "Average Price by brand", x = "Brands", y = "Price") + theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Graph:2 Average Price By Fuel
ggplot(data = mydf, aes(x = reorder(fuel,price), y = price, fill = fuel)) + geom_bar(stat = "summary", fun = "mean") + labs(title = "Average price by fuel", x = "Fuel", y = "Price")
#Graph:3 Average Price By Drivetrain
ggplot(data = mydf, aes(x = reorder(drivetrain, price), y = price, fill = drivetrain)) + geom_bar(stat = "summary", fun = "mean") + labs(title = "Average price by drivetrain") + labs(title = "Average price by Drivetrain") + labs(title = "Average price by Drivetrain", x = "Drivetrain", y = "Price")
#Graph:4 Average Price by Damaged
#Coverting variable damaged into factor
mydf$damaged = factor(mydf$damaged, levels = c(0,1), labels = c("Not Damaged", "Damaged"))
ggplot(data = mydf, aes(x = damaged, y = price, fill = damaged)) + geom_boxplot() + labs(title = "Average price by Damaged", x = "Damaged", y = "Price")
#Graph:5 Average Price by Owner
#converting variable first_owner into factor
mydf$first_owner = factor(mydf$first_owner, levels = c(0,1), labels = c("Not first Owner", "First owner"))
ggplot(data = mydf, aes(x = first_owner, y = price, fill = first_owner)) + geom_boxplot() + labs(title = "Average Price by Owner", x = "Car Owner", y = "Price")
# Graph:6 Year Vs Price
ggplot(data = mydf, aes(x = year, y = price)) + geom_point() + geom_smooth() + labs(title = "Year Vs Price", x = "Year", y = "Price")
# Graph:7 Owner Vs Year
ggplot(data = mydf, aes(x = first_owner, y = year, fill = first_owner)) + geom_boxplot() + labs(title = "Owner Vs Year", x = "Car Owner", y = "Year")
# To analyze relationship between "price" and "first_owner"
# model_1 = lm(mydf$price~mydf$first_owner, data = mydf)
# summary(model_1)
# plot(model_1)
# To analyze relationship between "price" and "mileage"
# model_2 = lm(mydf$price~mydf$mileage, data = mydf)
# summary(model_2)
# plot(model_2)
#Making model with multiple regression
model_3 = lm(mydf$price ~ mydf$engine_size + mydf$min_mpg + mydf$max_mpg)
summary(model_3)
plot(model_3)
# model_4 = lm(mydf$price ~ mydf$drivetrain + mydf$engine_size)
# summary(model_4)
# plot(model_4)
model_5 = lm(price ~ . , data=mydf)
summary(model_5)
plot(model_5)
final_model = lm(log(price) ~ ., data = mydf)
summary(final_model)
plot(final_model)
m1 = glm(first_owner ~ price, data = mydf, family = binomial)
summary(m1)
m2 = glm(first_owner ~ damaged + price, data = mydf, family = binomial)
summary(m2)
m3 = glm(first_owner ~ mileage + price, data = mydf, family = binomial)
summary(m3)
m4 = glm(first_owner ~ mileage + price + damaged + year, data = mydf, family = binomial)
summary(m4)
# m = step(m4)
# summary(m)
m5 = glm(first_owner ~ ., data=mydf, family=binomial)
summary(m5)
# model_s = step(m5)
# summary(model_s)
# Add code here to load all the required libraries with `library()`.
# Do not include any `install.package()` for any required packages in this rmd file.
library(dplyr)
library(ggplot2)
library(Hmisc)
# library(tidyverse)
# Only change the value for SID
# Assign your student id into the variable SID, for example:
SID <- 2329524                  # This is an example, replace 2101234 with your actual ID
SIDoffset <- (SID %% 50) + 1    # Your SID mod 50 + 1
load("car-analysis-data.Rda")
# Now subset the car data set
# Pick every 50th observation starting from your offset
# Put into your data frame named mydf (you can rename it)
mydf <- cars.analysis[seq(from=SIDoffset,to=nrow(cars.analysis),by=50),]
#summarize the data
summary(mydf)
str(mydf)
#To calculate number of NA's in the table
colSums(is.na(mydf))
sum(is.na(mydf))
#Further exploration of data for each column
unique(mydf$fuel)
unique(mydf$drivetrain)
unique(mydf$brand)
#random imputation
# mydf$max_mpg = with(mydf, impute(max_mpg, "random"))
#Replacing `negative values` and `NA's` by doing median imputation of max_mpg
median_max_mpg = median(mydf$max_mpg[mydf$max_mpg > 0], na.rm = TRUE)
mydf$max_mpg[mydf$max_mpg < 0] = median_max_mpg
mydf$max_mpg[is.na(mydf$max_mpg)] = median_max_mpg
#Replacing NA's with median values of min_mpg
median_min_mpg = median(mydf$min_mpg[mydf$min_mpg > 0], na.rm = TRUE)
mydf$min_mpg[is.na(mydf$min_mpg)] = median_min_mpg
#Dropping NA values for categorical values (enginesize)
median_engine_size = median(mydf$engine_size[mydf$engine_size > 0], na.rm = TRUE)
mydf$engine_size[is.na(mydf$engine_size)] = median_engine_size
#Checking if there are anyduplicates
duplicate_val = sum(duplicated(mydf))
duplicate_val
#Drop NA values for categorical values (damaged, first_owner)
mydf = mydf %>%
filter(!is.na(mydf$damaged))
mydf = mydf %>%
filter(!is.na(mydf$first_owner))
#Drop "Unknown" values in drivetrain
mydf = mydf %>%
filter(drivetrain != "Unknown")
#Check for spelling errors
mydf[mydf$fuel == "Pertol", "fuel"] = "Petrol"
unique(mydf$fuel)
table(mydf$fuel)
summary(mydf)
# summary(mydf)
#Graph:1 Average Price By Brand
ggplot(data = mydf, aes(x = reorder(brand, price), y = price, fill = brand)) + geom_bar(stat = "summary", fun  = "mean") +
labs(title = "Average Price by brand", x = "Brands", y = "Price") + theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Graph:2 Average Price By Fuel
ggplot(data = mydf, aes(x = reorder(fuel,price), y = price, fill = fuel)) + geom_bar(stat = "summary", fun = "mean") + labs(title = "Average price by fuel", x = "Fuel", y = "Price")
#Graph:3 Average Price By Drivetrain
ggplot(data = mydf, aes(x = reorder(drivetrain, price), y = price, fill = drivetrain)) + geom_bar(stat = "summary", fun = "mean") + labs(title = "Average price by drivetrain") + labs(title = "Average price by Drivetrain") + labs(title = "Average price by Drivetrain", x = "Drivetrain", y = "Price")
#Graph:4 Average Price by Damaged
#Coverting variable damaged into factor
mydf$damaged = factor(mydf$damaged, levels = c(0,1), labels = c("Not Damaged", "Damaged"))
ggplot(data = mydf, aes(x = damaged, y = price, fill = damaged)) + geom_boxplot() + labs(title = "Average price by Damaged", x = "Damaged", y = "Price")
#Graph:5 Average Price by Owner
#converting variable first_owner into factor
mydf$first_owner = factor(mydf$first_owner, levels = c(0,1), labels = c("Not first Owner", "First owner"))
ggplot(data = mydf, aes(x = first_owner, y = price, fill = first_owner)) + geom_boxplot() + labs(title = "Average Price by Owner", x = "Car Owner", y = "Price")
# Graph:6 Year Vs Price
ggplot(data = mydf, aes(x = year, y = price)) + geom_point() + geom_smooth() + labs(title = "Year Vs Price", x = "Year", y = "Price")
# Graph:7 Owner Vs Year
ggplot(data = mydf, aes(x = first_owner, y = year, fill = first_owner)) + geom_boxplot() + labs(title = "Owner Vs Year", x = "Car Owner", y = "Year")
# To analyze relationship between "price" and "first_owner"
# model_1 = lm(mydf$price~mydf$first_owner, data = mydf)
# summary(model_1)
# plot(model_1)
# To analyze relationship between "price" and "mileage"
# model_2 = lm(mydf$price~mydf$mileage, data = mydf)
# summary(model_2)
# plot(model_2)
#Making model with multiple regression
model_3 = lm(mydf$price ~ mydf$engine_size + mydf$min_mpg + mydf$max_mpg)
summary(model_3)
plot(model_3)
# model_4 = lm(mydf$price ~ mydf$drivetrain + mydf$engine_size)
# summary(model_4)
# plot(model_4)
model_5 = lm(price ~ . , data=mydf)
summary(model_5)
plot(model_5)
final_model = lm(log(price) ~ ., data = mydf)
summary(final_model)
plot(final_model)
m1 = glm(first_owner ~ price, data = mydf, family = binomial)
summary(m1)
m2 = glm(first_owner ~ damaged + price, data = mydf, family = binomial)
summary(m2)
m3 = glm(first_owner ~ mileage + price, data = mydf, family = binomial)
summary(m3)
m4 = glm(first_owner ~ mileage + price + damaged + year, data = mydf, family = binomial)
summary(m4)
# m = step(m4)
# summary(m)
m5 = glm(first_owner ~ ., data=mydf, family=binomial)
summary(m5)
# model_s = step(m5)
# summary(model_s)
# Add code here to load all the required libraries with `library()`.
# Do not include any `install.package()` for any required packages in this rmd file.
library(dplyr)
library(ggplot2)
library(Hmisc)
# library(tidyverse)
# Only change the value for SID
# Assign your student id into the variable SID, for example:
SID <- 2329524                  # This is an example, replace 2101234 with your actual ID
SIDoffset <- (SID %% 50) + 1    # Your SID mod 50 + 1
load("car-analysis-data.Rda")
# Now subset the car data set
# Pick every 50th observation starting from your offset
# Put into your data frame named mydf (you can rename it)
mydf <- cars.analysis[seq(from=SIDoffset,to=nrow(cars.analysis),by=50),]
#summarize the data
summary(mydf)
str(mydf)
#To calculate number of NA's in the table
colSums(is.na(mydf))
sum(is.na(mydf))
#Further exploration of data for each column
unique(mydf$fuel)
unique(mydf$drivetrain)
unique(mydf$brand)
#random imputation
# mydf$max_mpg = with(mydf, impute(max_mpg, "random"))
#Replacing `negative values` and `NA's` by doing median imputation of max_mpg
median_max_mpg = median(mydf$max_mpg[mydf$max_mpg > 0], na.rm = TRUE)
mydf$max_mpg[mydf$max_mpg < 0] = median_max_mpg
mydf$max_mpg[is.na(mydf$max_mpg)] = median_max_mpg
#Replacing NA's with median values of min_mpg
median_min_mpg = median(mydf$min_mpg[mydf$min_mpg > 0], na.rm = TRUE)
mydf$min_mpg[is.na(mydf$min_mpg)] = median_min_mpg
#Dropping NA values for categorical values (enginesize)
median_engine_size = median(mydf$engine_size[mydf$engine_size > 0], na.rm = TRUE)
mydf$engine_size[is.na(mydf$engine_size)] = median_engine_size
#Checking if there are anyduplicates
duplicate_val = sum(duplicated(mydf))
duplicate_val
#Drop NA values for categorical values (damaged, first_owner)
mydf = mydf %>%
filter(!is.na(mydf$damaged))
mydf = mydf %>%
filter(!is.na(mydf$first_owner))
#Drop "Unknown" values in drivetrain
mydf = mydf %>%
filter(drivetrain != "Unknown")
#Check for spelling errors
mydf[mydf$fuel == "Pertol", "fuel"] = "Petrol"
unique(mydf$fuel)
table(mydf$fuel)
summary(mydf)
# summary(mydf)
#Graph:1 Average Price By Brand
ggplot(data = mydf, aes(x = reorder(brand, price), y = price, fill = brand)) + geom_bar(stat = "summary", fun  = "mean") +
labs(title = "Average Price by brand", x = "Brands", y = "Price") + theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Graph:2 Average Price By Fuel
ggplot(data = mydf, aes(x = reorder(fuel,price), y = price, fill = fuel)) + geom_bar(stat = "summary", fun = "mean") + labs(title = "Average price by fuel", x = "Fuel", y = "Price")
#Graph:3 Average Price By Drivetrain
ggplot(data = mydf, aes(x = reorder(drivetrain, price), y = price, fill = drivetrain)) + geom_bar(stat = "summary", fun = "mean") + labs(title = "Average price by drivetrain") + labs(title = "Average price by Drivetrain") + labs(title = "Average price by Drivetrain", x = "Drivetrain", y = "Price")
#Graph:4 Average Price by Damaged
#Coverting variable damaged into factor
mydf$damaged = factor(mydf$damaged, levels = c(0,1), labels = c("Not Damaged", "Damaged"))
ggplot(data = mydf, aes(x = damaged, y = price, fill = damaged)) + geom_boxplot() + labs(title = "Average price by Damaged", x = "Damaged", y = "Price")
#Graph:5 Average Price by Owner
#converting variable first_owner into factor
mydf$first_owner = factor(mydf$first_owner, levels = c(0,1), labels = c("Not first Owner", "First owner"))
ggplot(data = mydf, aes(x = first_owner, y = price, fill = first_owner)) + geom_boxplot() + labs(title = "Average Price by Owner", x = "Car Owner", y = "Price")
# Graph:6 Year Vs Price
ggplot(data = mydf, aes(x = year, y = price)) + geom_point() + geom_smooth() + labs(title = "Year Vs Price", x = "Year", y = "Price")
# Graph:7 Owner Vs Year
ggplot(data = mydf, aes(x = first_owner, y = year, fill = first_owner)) + geom_boxplot() + labs(title = "Owner Vs Year", x = "Car Owner", y = "Year")
# To analyze relationship between "price" and "first_owner"
# model_1 = lm(mydf$price~mydf$first_owner, data = mydf)
# summary(model_1)
# plot(model_1)
# To analyze relationship between "price" and "mileage"
# model_2 = lm(mydf$price~mydf$mileage, data = mydf)
# summary(model_2)
# plot(model_2)
#Making model with multiple regression
model_3 = lm(mydf$price ~ mydf$engine_size + mydf$min_mpg + mydf$max_mpg)
summary(model_3)
plot(model_3)
# model_4 = lm(mydf$price ~ mydf$drivetrain + mydf$engine_size)
# summary(model_4)
# plot(model_4)
model_5 = lm(price ~ . , data=mydf)
summary(model_5)
plot(model_5)
final_model = lm(log(price) ~ ., data = mydf)
summary(final_model)
plot(final_model)
m1 = glm(first_owner ~ price, data = mydf, family = binomial)
summary(m1)
m2 = glm(first_owner ~ damaged + price, data = mydf, family = binomial)
summary(m2)
m3 = glm(first_owner ~ mileage + price, data = mydf, family = binomial)
summary(m3)
m4 = glm(first_owner ~ mileage + price + damaged + year, data = mydf, family = binomial)
summary(m4)
# m = step(m4)
# summary(m)
m5 = glm(first_owner ~ ., data=mydf, family=binomial)
summary(m5)
# model_s = step(m5)
# summary(model_s)
# Add code here to load all the required libraries with `library()`.
# Do not include any `install.package()` for any required packages in this rmd file.
library(dplyr)
library(ggplot2)
library(Hmisc)
# library(tidyverse)
# Only change the value for SID
# Assign your student id into the variable SID, for example:
SID <- 2329524                  # This is an example, replace 2101234 with your actual ID
SIDoffset <- (SID %% 50) + 1    # Your SID mod 50 + 1
load("car-analysis-data.Rda")
# Now subset the car data set
# Pick every 50th observation starting from your offset
# Put into your data frame named mydf (you can rename it)
mydf <- cars.analysis[seq(from=SIDoffset,to=nrow(cars.analysis),by=50),]
#summarize the data
summary(mydf)
str(mydf)
#To calculate number of NA's in the table
colSums(is.na(mydf))
sum(is.na(mydf))
#Further exploration of data for each column
unique(mydf$fuel)
unique(mydf$drivetrain)
unique(mydf$brand)
#random imputation
# mydf$max_mpg = with(mydf, impute(max_mpg, "random"))
#Replacing `negative values` and `NA's` by doing median imputation of max_mpg
median_max_mpg = median(mydf$max_mpg[mydf$max_mpg > 0], na.rm = TRUE)
mydf$max_mpg[mydf$max_mpg < 0] = median_max_mpg
mydf$max_mpg[is.na(mydf$max_mpg)] = median_max_mpg
#Replacing NA's with median values of min_mpg
median_min_mpg = median(mydf$min_mpg[mydf$min_mpg > 0], na.rm = TRUE)
mydf$min_mpg[is.na(mydf$min_mpg)] = median_min_mpg
#Dropping NA values for categorical values (enginesize)
median_engine_size = median(mydf$engine_size[mydf$engine_size > 0], na.rm = TRUE)
mydf$engine_size[is.na(mydf$engine_size)] = median_engine_size
#Checking if there are anyduplicates
duplicate_val = sum(duplicated(mydf))
duplicate_val
#Drop NA values for categorical values (damaged, first_owner)
mydf = mydf %>%
filter(!is.na(mydf$damaged))
mydf = mydf %>%
filter(!is.na(mydf$first_owner))
#Drop "Unknown" values in drivetrain
mydf = mydf %>%
filter(drivetrain != "Unknown")
#Check for spelling errors
mydf[mydf$fuel == "Pertol", "fuel"] = "Petrol"
unique(mydf$fuel)
table(mydf$fuel)
summary(mydf)
# summary(mydf)
#Graph:1 Average Price By Brand
ggplot(data = mydf, aes(x = reorder(brand, price), y = price, fill = brand)) + geom_bar(stat = "summary", fun  = "mean") +
labs(title = "Average Price by brand", x = "Brands", y = "Price") + theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Graph:2 Average Price By Fuel
ggplot(data = mydf, aes(x = reorder(fuel,price), y = price, fill = fuel)) + geom_bar(stat = "summary", fun = "mean") + labs(title = "Average price by fuel", x = "Fuel", y = "Price")
#Graph:3 Average Price By Drivetrain
ggplot(data = mydf, aes(x = reorder(drivetrain, price), y = price, fill = drivetrain)) + geom_bar(stat = "summary", fun = "mean") + labs(title = "Average price by drivetrain") + labs(title = "Average price by Drivetrain") + labs(title = "Average price by Drivetrain", x = "Drivetrain", y = "Price")
#Graph:4 Average Price by Damaged
#Coverting variable damaged into factor
mydf$damaged = factor(mydf$damaged, levels = c(0,1), labels = c("Not Damaged", "Damaged"))
ggplot(data = mydf, aes(x = damaged, y = price, fill = damaged)) + geom_boxplot() + labs(title = "Average price by Damaged", x = "Damaged", y = "Price")
#Graph:5 Average Price by Owner
#converting variable first_owner into factor
mydf$first_owner = factor(mydf$first_owner, levels = c(0,1), labels = c("Not first Owner", "First owner"))
ggplot(data = mydf, aes(x = first_owner, y = price, fill = first_owner)) + geom_boxplot() + labs(title = "Average Price by Owner", x = "Car Owner", y = "Price")
# Graph:6 Year Vs Price
ggplot(data = mydf, aes(x = year, y = price)) + geom_point() + geom_smooth() + labs(title = "Year Vs Price", x = "Year", y = "Price")
# Graph:7 Owner Vs Year
ggplot(data = mydf, aes(x = first_owner, y = year, fill = first_owner)) + geom_boxplot() + labs(title = "Owner Vs Year", x = "Car Owner", y = "Year")
# To analyze relationship between "price" and "first_owner"
model_1 = lm(mydf$price~mydf$first_owner, data = mydf)
summary(model_1)
plot(model_1)
# To analyze relationship between "price" and "mileage"
model_2 = lm(mydf$price~mydf$mileage, data = mydf)
summary(model_2)
plot(model_2)
#Making model with multiple regression
model_3 = lm(mydf$price ~ mydf$engine_size + mydf$min_mpg + mydf$max_mpg)
summary(model_3)
plot(model_3)
model_4 = lm(mydf$price ~ mydf$drivetrain + mydf$engine_size)
summary(model_4)
plot(model_4)
model_5 = lm(price ~ . , data=mydf)
summary(model_5)
plot(model_5)
final_model = lm(log(price) ~ ., data = mydf)
summary(final_model)
plot(final_model)
m1 = glm(first_owner ~ price, data = mydf, family = binomial)
summary(m1)
m2 = glm(first_owner ~ damaged + price, data = mydf, family = binomial)
summary(m2)
m3 = glm(first_owner ~ mileage + price, data = mydf, family = binomial)
summary(m3)
m4 = glm(first_owner ~ mileage + price + damaged + year, data = mydf, family = binomial)
summary(m4)
# m = step(m4)
# summary(m)
m5 = glm(first_owner ~ ., data=mydf, family=binomial)
summary(m5)
# model_s = step(m5)
# summary(model_s)
